// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}


datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model BlogMainMenu {
  id         Int            @id @default(autoincrement())
  name       String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @default(now())
  subMenus   BlogSubMenu[]
  blogItems  BlogItem[]
}

model BlogSubMenu {
  id         Int            @id @default(autoincrement())
  mainMenuId Int
  name       String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @default(now())
  mainMenu   BlogMainMenu   @relation(fields: [mainMenuId], references: [id], onDelete: Cascade)
  blogItems  BlogItem[]
}

model BlogItem {
  id         Int            @id @default(autoincrement())
  mainMenuId Int?
  subMenuId  Int?
  title      String
  path       String
  viewCount  Int            @default(0)
  tag        String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @default(now())
  mainMenu   BlogMainMenu?  @relation(fields: [mainMenuId], references: [id], onDelete: Cascade)
  subMenu    BlogSubMenu?   @relation(fields: [subMenuId], references: [id], onDelete: Cascade)
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
